datasource db {
  provider          = "sqlite"
  url               = "file:./prisma.db"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  postedVideos  Video[]
  likes         Like[]
}

model Category {
  id     String  @id @default(cuid())
  name   String
  videos Video[]
}

model Video {
  id          String   @id @default(cuid())
  url         String
  name        String
  description String
  category    Category @relation(fields: [categoryID], references: [id])
  categoryID  String
  fromUser    User     @relation(fields: [fromID], references: [id])
  fromID      String
  likes       Like[]
  createdAt   DateTime @default(now())
}

model Like {
  id         String @id @default(cuid())
  fromUser   User   @relation(fields: [fromUserId], references: [id])
  fromUserId String
  toVideo    Video  @relation(fields: [toVideoId], references: [id])
  toVideoId  String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
